1
00:00:00,470 --> 00:00:06,950
Hello and welcome to this lecture, where we are going to finish the implementation of single track.

2
00:00:07,280 --> 00:00:16,040
Just a reminder that in the last lectures, we created this code to select the algorithm we are going

3
00:00:16,040 --> 00:00:16,640
to use.

4
00:00:16,880 --> 00:00:26,360
Then we defines the bounding box or the beat box variable, which is responsible for selecting the objects

5
00:00:26,360 --> 00:00:31,670
that one should track, which is in the first frame of the video.

6
00:00:32,000 --> 00:00:41,210
Now we need to go through each one of the frames of the video to continue tracking the objects until

7
00:00:41,210 --> 00:00:41,810
the end.

8
00:00:42,410 --> 00:00:54,710
We can implement a while loop way through a we will redefine the OK variable and also the frame video

9
00:00:55,070 --> 00:01:04,400
that reads Every time we call this read function, we will move on to the next frame of the video.

10
00:01:04,790 --> 00:01:10,970
Take a look here that in this part, we call the read function.

11
00:01:11,180 --> 00:01:18,600
So we have access to the first frame of the video to select the object we once should track.

12
00:01:19,100 --> 00:01:27,830
And when we put this code inside this while loop, we are going through each one of the frames.

13
00:01:28,100 --> 00:01:30,890
First, we get the first frame.

14
00:01:31,280 --> 00:01:34,430
Then this second, the third, the fourth.

15
00:01:34,430 --> 00:01:43,940
And so one let's implement and if statement, if not, OK, if it wasn't possible, short reads the

16
00:01:43,940 --> 00:01:46,070
next frame of the video.

17
00:01:46,310 --> 00:01:53,540
It means that the video has ended so we can just break the zigwheels.com off the wire loop.

18
00:01:53,870 --> 00:01:56,900
This code is used to stop.

19
00:01:56,900 --> 00:01:59,780
Is it usual when the video ends?

20
00:02:00,260 --> 00:02:10,460
In this part of the code, we are initialize the algorithm with the first frame and the first position

21
00:02:10,460 --> 00:02:11,690
of the object.

22
00:02:12,020 --> 00:02:21,680
And every time it reads a new frame, we need to update the location of the building blocks because

23
00:02:21,680 --> 00:02:30,980
in the next frames of the video, the object will be in a different position so we can recreate both

24
00:02:30,980 --> 00:02:31,910
variables.

25
00:02:32,540 --> 00:02:33,350
OK.

26
00:02:33,830 --> 00:02:45,590
And beat box equals tracker thoughts, updates, and we just needs just sans the frame.

27
00:02:45,860 --> 00:02:48,470
And this is not the first frame.

28
00:02:48,890 --> 00:02:55,160
This is this second, the third, the fourth, according to the size of the video.

29
00:02:55,430 --> 00:03:03,980
We use the first frame just to initialize and after the initialization of the algorithm, we need to

30
00:03:03,980 --> 00:03:05,960
update the location.

31
00:03:06,320 --> 00:03:10,430
We can also take a look at this variable.

32
00:03:10,880 --> 00:03:11,600
OK.

33
00:03:11,780 --> 00:03:13,010
And this box?

34
00:03:13,370 --> 00:03:15,620
Let's run this code.

35
00:03:17,150 --> 00:03:27,710
I will select the runner press and there, and we can take a look here at some information we have here.

36
00:03:28,100 --> 00:03:38,370
The first position of the object this is the initial bounding box that we selected using this select

37
00:03:38,370 --> 00:03:39,740
drive function.

38
00:03:40,130 --> 00:03:48,860
And after processing every frame of the video, we are updating the position of the object.

39
00:03:49,370 --> 00:03:54,020
This is the first position X and Y axis.

40
00:03:54,320 --> 00:04:02,540
And this is the second position in this second frame of the video in the third frame of the video.

41
00:04:02,810 --> 00:04:06,270
In the fourth frame of the video and so on.

42
00:04:06,620 --> 00:04:15,410
See that these values here are not changed because they are the size of the building blocks.

43
00:04:15,770 --> 00:04:23,880
And it keeps this same size until the end of the video, and we can take a look here at the message.

44
00:04:23,900 --> 00:04:27,730
It means that the object could be tracked.

45
00:04:28,010 --> 00:04:34,130
And this is the new position of the object, every each one of the frames.

46
00:04:34,850 --> 00:04:39,050
And here is the last position of the object.

47
00:04:39,500 --> 00:04:48,170
We can also brings the OK variable here just to see the value equals false.

48
00:04:48,620 --> 00:04:51,620
Let's run this code again.

49
00:04:52,250 --> 00:04:54,890
Select the runner press.

50
00:04:54,890 --> 00:04:58,910
And there we can see the results here.

51
00:04:59,240 --> 00:05:00,020
But we just.

52
00:05:00,270 --> 00:05:06,080
Needs to put the old key variable after reading the freight.

53
00:05:06,860 --> 00:05:08,210
Let's run again.

54
00:05:10,320 --> 00:05:12,390
Selects the runner.

55
00:05:12,420 --> 00:05:22,050
Press enter, and let's wait until it finishes, processing all the video at the ends, we can see photos

56
00:05:22,320 --> 00:05:27,960
which indicates that we couldn't read any frame any more.

57
00:05:28,380 --> 00:05:38,940
So it means that the algorithm could process all the video and then the break will be executed to stop

58
00:05:38,940 --> 00:05:40,080
the while loop.

59
00:05:40,680 --> 00:05:44,610
Let's put this shoe prints and comments.

60
00:05:45,480 --> 00:05:48,870
And now let's see the results in the video.

61
00:05:49,590 --> 00:05:51,560
If OK.

62
00:05:52,650 --> 00:06:02,160
Equals true, if we could reads and track the objects, we will draw a rectangle to see the results.

63
00:06:02,520 --> 00:06:14,690
Let's create the variables x y w and H e equals in the format of a list less converts.

64
00:06:15,060 --> 00:06:22,700
Shoe ins, ins v. A. We will create these variable v. A. For him.

65
00:06:23,520 --> 00:06:24,450
B. Box.

66
00:06:24,750 --> 00:06:36,390
It means we are accessing this variable, which is composed of the X and Y axis and also the size of

67
00:06:36,390 --> 00:06:37,530
the balding box.

68
00:06:37,950 --> 00:06:44,250
And we are copying each one of the values to each one of these variables.

69
00:06:44,610 --> 00:06:56,220
For example, this first value will be copied to Variable X, this sÃ©quence true variable Y, the third

70
00:06:56,860 --> 00:07:02,680
variable W and therefore true variable h.

71
00:07:03,000 --> 00:07:10,680
We can just see these results Breen's X, Y, W and H.

72
00:07:11,860 --> 00:07:13,480
Run this code again.

73
00:07:14,620 --> 00:07:20,230
Let's select the runner and we can see here the results.

74
00:07:20,530 --> 00:07:29,800
We are just copying each one of the values of the building blocks to each one of these variables here

75
00:07:30,550 --> 00:07:39,940
and now we can draw direct Bengal on the image civic dots rectangle.

76
00:07:40,270 --> 00:07:43,240
We can use this open see function.

77
00:07:43,780 --> 00:07:46,570
The first parameter is the frame.

78
00:07:46,930 --> 00:07:56,530
Just a reminder that every time we run this wire loop, we are getting the next, the next and the next

79
00:07:56,530 --> 00:07:57,070
frame.

80
00:07:57,430 --> 00:08:01,270
So we'll put the rectangle in each one of them.

81
00:08:01,840 --> 00:08:11,050
The next parameter is the first position X and Y, which means the initial position of the building

82
00:08:11,050 --> 00:08:11,620
blocks.

83
00:08:12,280 --> 00:08:22,390
The next parameter is the final position of the building blocks, so we can both hear X plus W, which

84
00:08:22,390 --> 00:08:25,060
is the width of the building blocks.

85
00:08:25,600 --> 00:08:39,159
This number here we are just adding this value, plus this value and then y plus h, we are adding these

86
00:08:39,159 --> 00:08:43,000
value plus these are their value here.

87
00:08:43,600 --> 00:08:47,920
Then the X parameter is the colors variable.

88
00:08:48,130 --> 00:08:55,120
As we saw before, we are defining random colors should draw the building blocks.

89
00:08:55,720 --> 00:09:04,630
The next two parameters are related to this size of the building blocks, for example Q and one in some

90
00:09:04,630 --> 00:09:13,090
seconds we're going to perform some tests changing these values if it is not OK.

91
00:09:13,450 --> 00:09:22,240
If we could then update the building blocks with the next position, we will bring a message see visual

92
00:09:23,080 --> 00:09:25,630
words, text frame.

93
00:09:26,560 --> 00:09:30,970
Let's type tracking failure.

94
00:09:31,390 --> 00:09:40,390
When the algorithm was unable to track the objects, the other parameter is the position where we are

95
00:09:40,390 --> 00:09:42,400
going to print the message.

96
00:09:42,850 --> 00:09:50,520
The next one see which new ones Hershey simplex.

97
00:09:50,980 --> 00:09:56,890
This is the type of the ladder this size of the ladder.

98
00:09:57,490 --> 00:10:04,780
The caller in the b r four months zero zero two five five.

99
00:10:04,990 --> 00:10:08,380
And finally, bit thickness off the ladder.

100
00:10:08,650 --> 00:10:09,520
Number two.

101
00:10:09,940 --> 00:10:17,990
And finally, Steve Chu, I am sure you should see the results dragging.

102
00:10:18,010 --> 00:10:20,140
This is the name of the window.

103
00:10:20,410 --> 00:10:25,840
And let's put here this frame, if is true.

104
00:10:26,500 --> 00:10:28,600
But wait here.

105
00:10:28,930 --> 00:10:35,160
This open C differential is used when one should type by specific.

106
00:10:35,800 --> 00:10:39,930
For example, we can type here this symbol.

107
00:10:40,450 --> 00:10:42,760
Zero x f f.

108
00:10:43,360 --> 00:10:45,970
This is the Exodus symbol codes.

109
00:10:46,510 --> 00:10:53,110
If it is equal to twenty seven, then we can break the Z crucial.

110
00:10:53,650 --> 00:10:59,800
This number twenty seven means the ASCII in your keyboard.

111
00:11:00,280 --> 00:11:05,920
So when you press ask, we are going to break the while loop.

112
00:11:06,070 --> 00:11:08,170
So the window will be closed.

113
00:11:08,770 --> 00:11:11,200
Now let's test again.

114
00:11:11,770 --> 00:11:12,340
Run.

115
00:11:12,850 --> 00:11:16,930
Let's select the runner press.

116
00:11:16,930 --> 00:11:22,900
And third, and we can see here, that's the tracking is already working.

117
00:11:23,260 --> 00:11:30,400
Of course, we can see a problem here because we are using the boosting algorithm.

118
00:11:30,700 --> 00:11:35,950
We can press ask in the keyboard's to close the window.

119
00:11:36,340 --> 00:11:44,320
Let's first write with the m i l algorithm, which is index number one.

120
00:11:45,960 --> 00:11:47,460
Run this code again.

121
00:11:47,880 --> 00:11:59,670
Let's select the runner breath and see that every time we run, we have a different caller here because

122
00:11:59,670 --> 00:12:09,210
the callers were defined randomly and see that we have a problem because we selected the Yellow Runner

123
00:12:09,480 --> 00:12:14,280
and the algorithm started tracking this or other runner.

124
00:12:14,640 --> 00:12:23,370
And it happens because these two first algorithms aren't so good, as we saw in the intuition lecturers.

125
00:12:23,730 --> 00:12:28,530
They are the most simplest algorithms to track objects.

126
00:12:28,890 --> 00:12:33,000
So the results once be awards in all scenarios.

127
00:12:33,480 --> 00:12:37,200
Now we can perform some tests using these parameters.

128
00:12:37,590 --> 00:12:41,740
For example, let's change here from choo choo.

129
00:12:41,760 --> 00:12:49,260
Then just just see the results selected the runner and enter.

130
00:12:49,650 --> 00:12:53,910
As you can see, this is this size of the body box.

131
00:12:54,630 --> 00:12:56,970
Let's move again to number two.

132
00:12:57,300 --> 00:13:04,890
And actually, this last parameter, we don't need to specify because it is the type of the line.

133
00:13:05,190 --> 00:13:13,110
For example, if you want a bash line or a solid light, so we don't need to worry about the last parameter.

134
00:13:13,440 --> 00:13:22,440
And the same for this one here we can just raise and we cannot see this message tracking failure because

135
00:13:22,440 --> 00:13:25,320
the body box was generated.

136
00:13:25,590 --> 00:13:33,840
Of course, it wasn't around the objects, but the algorithm could still generate in the building blocks.

137
00:13:34,290 --> 00:13:39,480
We get this message only if we can't open the gate.

138
00:13:39,480 --> 00:13:42,210
The next the location of the object.

139
00:13:42,510 --> 00:13:50,280
In the next lecture, we will perform some other tests and will check when we will get tracking failure.

140
00:13:50,940 --> 00:14:00,480
Finally, we can just put another message on the frame or will copy and paste this code here.

141
00:14:00,840 --> 00:14:12,360
Let's put here the name of the algorithm tracker type the positions 100 and planning, and we can keep

142
00:14:12,360 --> 00:14:13,920
the other parameters.

143
00:14:14,460 --> 00:14:16,980
Now let's run this code again.

144
00:14:18,490 --> 00:14:29,230
Select the runner press, and there we can see here at the top of the video, then name of the algorithm,

145
00:14:29,500 --> 00:14:38,470
so it is nice to see the name of the algorithm in order to check the results and the next lecturer will

146
00:14:38,470 --> 00:14:42,340
perform some tests using all algorithms.

147
00:14:42,760 --> 00:14:43,450
See you there!

